--BAI 1: LENH CREATE PROCEDURE
--CAU 1: PROC DEPT_INFO
CREATE OR REPLACE PROCEDURE DEPT_INFO(
    MA_PHONG_BAN IN DEPARTMENTS.DEPARTMENT_ID%TYPE,
    PHONG_BAN   OUT DEPARTMENTS%ROWTYPE
)
IS
BEGIN
    SELECT * INTO PHONG_BAN 
    FROM DEPARTMENTS
    WHERE DEPARTMENT_ID = MA_PHONG_BAN AND ROWNUM <= 1;

EXCEPTION
WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('KHONG TIM THAY THONG TIN PHONG BAN CO ID = ' || MA_PHONG_BAN);
END;

--TEST PROC
DECLARE
    PHONG_BAN DEPARTMENTS%ROWTYPE;
BEGIN
    DEPT_INFO(0, PHONG_BAN);
    DBMS_OUTPUT.PUT_LINE('TEN PHONG BAN CAN TIM LA: ' || PHONG_BAN.DEPARTMENT_NAME);
END;

--CAU 2: PROC ADD_JOB
CREATE OR REPLACE PROCEDURE ADD_JOB (
    MA_CONG_VIEC    IN JOBS.JOB_ID%TYPE,
    TEN_CONG_VIEC   IN JOBS.JOB_TITLE%TYPE
)
IS
BEGIN
    INSERT INTO JOBS
    (JOB_ID, JOB_TITLE)
    VALUES
    (MA_CONG_VIEC, TEN_CONG_VIEC);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('MA CONG VIEC DA TON TAI');
END;

--TEST PROC
BEGIN
    ADD_JOB('CSKH', 'Cham soc khach hang');
END;



--CAU 3: PROCEDUR UPDATE_COMM
CREATE OR REPLACE PROCEDURE UPDATE_COMM(
    MA_NHAN_VIEN IN EMPLOYEES.EMPLOYEE_ID%TYPE
)
IS
    CUSTOM_EX EXCEPTION;
BEGIN
    UPDATE EMPLOYEES
    SET COMMISSION_PCT = COMMISSION_PCT * 1.05
    WHERE EMPLOYEE_ID = MA_NHAN_VIEN;

    IF SQL%NOTFOUND THEN
        RAISE CUSTOM_EX;
    END IF;
    
EXCEPTION
WHEN CUSTOM_EX THEN
    DBMS_OUTPUT.PUT_LINE('MA NHAN VIEN KHONG TON TAI');
END;

--TEST PROC
BEGIN
    UPDATE_COMM(99);
END;

--CAU 4: PROC ADD_EMP
CREATE OR REPLACE PROCEDURE ADD_EMP(
    NHAN_VIEN IN EMPLOYEES%ROWTYPE
)
IS
BEGIN
    INSERT INTO EMPLOYEES
    VALUES NHAN_VIEN;
    
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('MA NHAN VIEN DA TON TAI');
END;

--TEST PROC
DECLARE
    NHANVIEN EMPLOYEES%ROWTYPE;
BEGIN
    NHANVIEN.EMPLOYEE_ID := 99;
    NHANVIEN.LAST_NAME := 'TEST';
    NHANVIEN.EMAIL := 'TEST';
    NHANVIEN.HIRE_DATE := TO_DATE('19/12/2000', 'DD/MM/YYYY');
    NHANVIEN.JOB_ID := 'CSKH';
    ADD_EMP(NHANVIEN);
END;

--CAU 5: PROC DELETE_EMP
CREATE OR REPLACE PROCEDURE DELETE_EMP(
    MA_NHAN_VIEN IN EMPLOYEES.EMPLOYEE_ID%TYPE
)
IS
    CUSTOM_EX EXCEPTION;
BEGIN
    DELETE FROM EMPLOYEES
    WHERE EMPLOYEE_ID = MA_NHAN_VIEN;
    
    IF SQL%NOTFOUND THEN
        RAISE CUSTOM_EX;
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('DA XOA NHAN VIEN THANH CONG');

EXCEPTION
WHEN CUSTOM_EX THEN
    DBMS_OUTPUT.PUT_LINE('KHONG TIM THAY NHAN VIEN CAN XOA');
END;

--TEST PROC
BEGIN
    DELETE_EMP(99);
END;

--CAU 6: PROC FIND_EMP
CREATE OR REPLACE PROCEDURE FIND_EMP
IS
    MA_NHAN_VIEN EMPLOYEES.EMPLOYEE_ID%TYPE;
    TEN_NHAN_VIEN EMPLOYEES.LAST_NAME%TYPE;
    CURSOR c1 
    IS
        SELECT E.EMPLOYEE_ID, E.LAST_NAME
        FROM EMPLOYEES E 
        INNER JOIN JOBS J 
        ON E.JOB_ID = J.JOB_ID
        WHERE E.SALARY > J.MIN_SALARY AND E.SALARY < J.MAX_SALARY;
        
BEGIN
    OPEN c1;
    LOOP
        FETCH C1 INTO MA_NHAN_VIEN, TEN_NHAN_VIEN;
        EXIT WHEN C1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('MA NHAN VIEN = ' || MA_NHAN_VIEN || 'TEN NHAN VIEN = ' || TEN_NHAN_VIEN);
    END LOOP;
    
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR -> '||SQLERRM);
    CLOSE c1;
END;

BEGIN
    FIND_EMP;
END;

--CAU 7: PROC UPDATE_COMM
CREATE OR REPLACE PROCEDURE UPDATE_COMM
IS
    MA_NHAN_VIEN    EMPLOYEES.EMPLOYEE_ID%TYPE;
    LUONG           EMPLOYEES.SALARY%TYPE;
    SO_NAM_LAM_VIEC NUMBER;
    CURSOR C1
    IS
        SELECT EMPLOYEE_ID, SALARY, HIRE_DATE
        FROM EMPLOYEES;
        
        C1_ROW C1%ROWTYPE;
BEGIN
    OPEN C1;
    LOOP
        EXIT WHEN C1%NOTFOUND;
        FETCH C1 INTO C1_ROW;
        MA_NHAN_VIEN := C1_ROW.EMPLOYEE_ID;
        LUONG := C1_ROW.SALARY;
        SO_NAM_LAM_VIEC := MONTHS_BETWEEN(CURRENT_DATE, C1_ROW.HIRE_DATE) / 12;
        
        IF SO_NAM_LAM_VIEC > 2 THEN
            LUONG := LUONG + 200;
        ELSIF (SO_NAM_LAM_VIEC < 2) AND (SO_NAM_LAM_VIEC > 1) THEN
            LUONG := LUONG + 100;
        ELSIF SO_NAM_LAM_VIEC = 1 THEN
            LUONG := LUONG + 50;
        END IF;
        
        UPDATE EMPLOYEES
        SET SALARY = LUONG
        WHERE EMPLOYEE_ID = MA_NHAN_VIEN;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('CAP NHAT THANH CONG');
END;

BEGIN
    UPDATE_COMM;
END;

--CAU 8: PROC JOB_HIS
CREATE OR REPLACE PROCEDURE JOB_HIS(
    MA_NHAN_VIEN IN EMPLOYEES.EMPLOYEE_ID%TYPE,
    LICH_SU     OUT JOB_HISTORY%ROWTYPE
)
IS
BEGIN
    SELECT * INTO LICH_SU
    FROM JOB_HISTORY
    WHERE EMPLOYEE_ID = MA_NHAN_VIEN;

EXCEPTION
WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('KHONG TIM THAY LICH SU LAM VIEC CUA NHAN VIEN NHAN VIEN NAY');
END;

--TEST PROC
DECLARE
    LICH_SU_LAM_VIEC JOB_HISTORY%ROWTYPE;
BEGIN
    JOB_HIS(98, LICH_SU_LAM_VIEC);
    
    IF LICH_SU_LAM_VIEC.EMPLOYEE_ID IS NOT NULL THEN
        DBMS_OUTPUT.PUT_LINE('NGAY BAT DAU LAM VIEC = ' || LICH_SU_LAM_VIEC.START_DATE);
        DBMS_OUTPUT.PUT_LINE('NGAY KET THUC LAM VIEC = ' || LICH_SU_LAM_VIEC.END_DATE);
    END IF;
END;

--BAI 2: LENH CREATE FUNCTION
--CAU 1: TAO FUNCTION SUMLARY

CREATE OR REPLACE FUNCTION SUM_SALARY (
    MA_PHONG_BAN IN EMPLOYEES.DEPARTMENT_ID%TYPE
)
RETURN NUMBER
IS
    TONG_LUONG NUMBER(10);
    
BEGIN

    SELECT SUM(SALARY) INTO TONG_LUONG
    FROM EMPLOYEES
    WHERE DEPARTMENT_ID = MA_PHONG_BAN;
    
    IF TONG_LUONG IS NOT NULL THEN
        RETURN TONG_LUONG;
    ELSE
        RETURN -1;
    END IF;
END;

SELECT SUM_SALARY(84) FROM DUAL;

--CAU 2: FUNCTION NAME_ON
CREATE OR REPLACE FUNCTION NAME_ON ( 
    MA_QUOC_GIA IN COUNTRIES.COUNTRY_ID%TYPE
)
RETURN VARCHAR2
IS
    TEN_QUOC_GIA COUNTRIES.COUNTRY_NAME%TYPE;
    
BEGIN

    SELECT COUNTRY_NAME INTO TEN_QUOC_GIA
    FROM COUNTRIES
    WHERE COUNTRY_ID = MA_QUOC_GIA;
    
    IF TEN_QUOC_GIA IS NOT NULL THEN
        RETURN TEN_QUOC_GIA;
    ELSE
        RETURN -1;
    END IF;
END;

SELECT NAME_ON('ZW')
FROM DUAL;

--CAU 3: FUNCTION ANNUAL_COMP
CREATE OR REPLACE FUNCTION ANNUAL_COMP (
    LUONG_THANG IN NUMBER,
    HOA_HONG    IN NUMBER
)
RETURN NUMBER

IS
    LUONG_HANG_NAM NUMBER(10, 0);
    
BEGIN
    SELECT LUONG_THANG * 12 * (HOA_HONG / 100 + 1) INTO LUONG_HANG_NAM
    FROM DUAL;
    
    IF LUONG_HANG_NAM > 0 THEN
        RETURN LUONG_HANG_NAM;
    ELSE 
        RETURN -1;
    END IF;
END;

--TEST FUNCTION
SELECT ANNUAL_COMP(-10000, 10)
FROM DUAL;

--CAU 4: FUNCTION AVG_SALARY
CREATE OR REPLACE FUNCTION AVG_SALARY (
    MA_PHONG_BAN IN EMPLOYEES.DEPARTMENT_ID%TYPE
)
RETURN EMPLOYEES.SALARY%TYPE

IS
    LUONG_TRUNG_BINH EMPLOYEES.SALARY%TYPE;
    
BEGIN
    SELECT AVG(SALARY) INTO LUONG_TRUNG_BINH
    FROM EMPLOYEES
    WHERE DEPARTMENT_ID = MA_PHONG_BAN;
    
    IF LUONG_TRUNG_BINH IS NOT NULL THEN
        RETURN LUONG_TRUNG_BINH;
    ELSE
        RETURN -1;
    END IF;
END;

--TEST FUNCTION
SELECT AVG_SALARY(1)
FROM DUAL;

--CAU 5: FUNCTION TIME_WORK
CREATE OR REPLACE FUNCTION TIME_WORK (
    MA_NHAN_VIEN IN EMPLOYEES.EMPLOYEE_ID%TYPE
)
RETURN NUMBER

IS
    SO_THANG NUMBER(10);

BEGIN
    
    SELECT TRUNC(ROUND(MONTHS_BETWEEN(TRUNC(CURRENT_DATE, 'mm'), TRUNC(HIRE_DATE, 'mm')) + 1)) INTO SO_THANG
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID = MA_NHAN_VIEN;
    
    IF SO_THANG IS NOT NULL THEN
        RETURN SO_THANG;
    ELSE
        RETURN -1;
    END IF;
    
END;

--TEST FUNCTION
SELECT TIME_WORK(102)
FROM DUAL;

--BAI 3: LENH CREATE TRIGGER
--CAU 1:

CREATE OR REPLACE TRIGGER EMP_HIRE_DATE
AFTER INSERT OR UPDATE
   ON EMPLOYEES
   FOR EACH ROW 
   
BEGIN
    IF :NEW.HIRE_DATE > TRUNC(CURRENT_DATE) THEN
        RAISE_APPLICATION_ERROR( -20001, 'NGAY THUE NHAN VIEN PHAI NHO HON HOAC BANG NGAY HIEN HANH' ); 
    END IF;

END;

--TEST TRIGGER
DECLARE
    NHANVIEN EMPLOYEES%ROWTYPE;
BEGIN
    NHANVIEN.EMPLOYEE_ID := 99;
    NHANVIEN.LAST_NAME := 'TEST';
    NHANVIEN.EMAIL := 'TEST';
    NHANVIEN.HIRE_DATE := TO_DATE('19/12/2025', 'DD/MM/YYYY');
    NHANVIEN.JOB_ID := 'CSKH';
    ADD_EMP(NHANVIEN);
END;

--CAU 2: 
CREATE OR REPLACE TRIGGER JOBS_MIN_MAX_SALARY
AFTER INSERT OR UPDATE
   ON JOBS
   FOR EACH ROW 
   
BEGIN
    IF :NEW.MIN_SALARY >= :NEW.MAX_SALARY THEN
    RAISE_APPLICATION_ERROR(-20001, 'MIN_SALARY PHAI NHO HON MAX_SALARY');
    END IF;

END;

--TEST TRIGGER
INSERT INTO JOBS
VALUES ('CKS2', 'TEST', 10000, 9000);

UPDATE JOBS
SET MAX_SALARY = 2000
WHERE JOB_ID = 'AD_ASST';

--CAU 3:
CREATE OR REPLACE TRIGGER JOB_HISTORY_DATE
AFTER INSERT OR UPDATE
   ON JOB_HISTORY
   FOR EACH ROW 
   
BEGIN
    IF :NEW.START_DATE > :NEW.END_DATE THEN
        RAISE_APPLICATION_ERROR(-20001, 'NGAY BAT DAU PHAI NHO HON HOAC BANG NGAY KET THUC');
    END IF;

END;

--TEST TRIGGER
INSERT INTO JOB_HISTORY
VALUES (100, CURRENT_DATE, TO_DATE('12/05/2004', 'DD/MM/YYYY'), 'IT_PROG', 60);

UPDATE JOB_HISTORY
SET START_DATE = CURRENT_DATE
WHERE EMPLOYEE_ID = 102;

--CAU 4:
CREATE OR REPLACE TRIGGER EMPLOYEES_SALARY_COMMISSION_PCT
AFTER UPDATE
   ON EMPLOYEES
   FOR EACH ROW 
   
BEGIN
    IF (:NEW.SALARY < :OLD.SALARY) OR (:NEW.COMMISSION_PCT < :OLD.COMMISSION_PCT) THEN
        RAISE_APPLICATION_ERROR(-20001, 'LUONG VA HOA HONG CUA NHAN VIEN CHI DC TANG CHU KHONG DC GIAM');
    END IF;

END;

--TEST TRIGGER
UPDATE EMPLOYEES
SET SALARY = 20000
WHERE EMPLOYEE_ID = 100;

UPDATE EMPLOYEES
SET COMMISSION_PCT = 0.3
WHERE EMPLOYEE_ID = 145;